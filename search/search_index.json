{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to Python-Twitter\u2019s documentation! A Python wrapper around for Twitter API V2 . Introduction Twitter has published new version Twitter API V2 for developer at Aug 13, 2020. So this library provides a Python interface for this version API. Library work on Python 3.6+. Tips This library only have apis for v2, not contains api for v1.1 Thanks Inspired by Python-twitter , Thanks a lot.","title":"Introduction"},{"location":"#welcome-to-python-twitters-documentation","text":"A Python wrapper around for Twitter API V2 .","title":"Welcome to Python-Twitter\u2019s documentation!"},{"location":"#introduction","text":"Twitter has published new version Twitter API V2 for developer at Aug 13, 2020. So this library provides a Python interface for this version API. Library work on Python 3.6+. Tips This library only have apis for v2, not contains api for v1.1","title":"Introduction"},{"location":"#thanks","text":"Inspired by Python-twitter , Thanks a lot.","title":"Thanks"},{"location":"authorization/","text":"At Twitter api, many endpoints use OAuth 1.0a method to act, or make API requests, on behalf of a Twitter account. For example, if you have a Twitter developer app, you can make API requests on behalf of any Twitter account as long as that user authenticates your app. So, This will show you how to obtain user access tokens through the 3-legged OAuth flow. Prerequisite At the beginning, You need a Twitter app, and enable the 3-legged OAuth . You can get more information at the official Documentation . If you're ready, now let's get started do a simple example with this library. Initial Api You need consumer key and secret to initial Api instance. from pytwitter import Api api = Api ( consumer_key = 'your consumer key' , consumer_secret = 'your consumer secret' , oauth_flow = True ) By default, The callback uri is https://localhost/ , You need add this url to App's Authentication settings . Get authorization url Now you can get the url for user to do authenticate, api . get_authorize_url () # https://api.twitter.com/oauth/authorize?oauth_token=NPcudxy0yU5T3tBzho7iCotZ3cnetKwcTIRlX0iwRl0 Upon successful authentication, your callback_url would receive a request containing the oauth_token and oauth_verifier parameters. Eg: https://localhost/?oauth_token=NPcudxy0yU5T3tBzho7iCotZ3cnetKwcTIRlX0iwRl0&oauth_verifier=uw7NjWHT6OJ1MpJOXsHfNxoAhPKpgI8BlYDhxEjIBY Generate access token Once you have the redirect response for your callback url, you can get the user access token. api . generate_access_token ( response = \"You response url\" ) # {'oauth_token': 'oauth-token','oauth_token_secret': 'oauth-token-secret', 'user_id': 'user id', 'screen_name': 'screen name'} Now the api instance will have the user authorization. You can use this to manage apis need user authorization like hide reply , manage follow ... Note If you have some confuse. you need to read the Get user access token first.","title":"Authorization"},{"location":"authorization/#prerequisite","text":"At the beginning, You need a Twitter app, and enable the 3-legged OAuth . You can get more information at the official Documentation . If you're ready, now let's get started do a simple example with this library.","title":"Prerequisite"},{"location":"authorization/#initial-api","text":"You need consumer key and secret to initial Api instance. from pytwitter import Api api = Api ( consumer_key = 'your consumer key' , consumer_secret = 'your consumer secret' , oauth_flow = True ) By default, The callback uri is https://localhost/ , You need add this url to App's Authentication settings .","title":"Initial Api"},{"location":"authorization/#get-authorization-url","text":"Now you can get the url for user to do authenticate, api . get_authorize_url () # https://api.twitter.com/oauth/authorize?oauth_token=NPcudxy0yU5T3tBzho7iCotZ3cnetKwcTIRlX0iwRl0 Upon successful authentication, your callback_url would receive a request containing the oauth_token and oauth_verifier parameters. Eg: https://localhost/?oauth_token=NPcudxy0yU5T3tBzho7iCotZ3cnetKwcTIRlX0iwRl0&oauth_verifier=uw7NjWHT6OJ1MpJOXsHfNxoAhPKpgI8BlYDhxEjIBY","title":"Get authorization url"},{"location":"authorization/#generate-access-token","text":"Once you have the redirect response for your callback url, you can get the user access token. api . generate_access_token ( response = \"You response url\" ) # {'oauth_token': 'oauth-token','oauth_token_secret': 'oauth-token-secret', 'user_id': 'user id', 'screen_name': 'screen name'} Now the api instance will have the user authorization. You can use this to manage apis need user authorization like hide reply , manage follow ... Note If you have some confuse. you need to read the Get user access token first.","title":"Generate access token"},{"location":"installation/","text":"Dependencies These distributions will be installed automatically when installing python-twitter-v2. Requests is an elegant and simple HTTP library for Python, built for human beings. Requests-OAuthlib uses the Python Requests and OAuthlib libraries to provide an easy-to-use Python interface for building OAuth1 and OAuth2 clients. Installation From Pypi $ pip install python-twitter-v2 From source use Poetry $ git clone https://github.com/sns-sdks/python-twitter.git $ cd python-twitter $ make env $ poetry build make env Testing Test the code, Run: make test See the coverage information: make cov-term","title":"Installation"},{"location":"installation/#dependencies","text":"These distributions will be installed automatically when installing python-twitter-v2. Requests is an elegant and simple HTTP library for Python, built for human beings. Requests-OAuthlib uses the Python Requests and OAuthlib libraries to provide an easy-to-use Python interface for building OAuth1 and OAuth2 clients.","title":"Dependencies"},{"location":"installation/#installation","text":"","title":"Installation"},{"location":"installation/#from-pypi","text":"$ pip install python-twitter-v2","title":"From Pypi"},{"location":"installation/#from-source","text":"use Poetry $ git clone https://github.com/sns-sdks/python-twitter.git $ cd python-twitter $ make env $ poetry build make env","title":"From source"},{"location":"installation/#testing","text":"Test the code, Run: make test See the coverage information: make cov-term","title":"Testing"},{"location":"usage/preparation/","text":"For now api, Twitter have different token, but we can classify them into two types: App Access Token User Access Token I assume that you have initialized two Api instances to get data from Twitter. one is variable my_api (instance with your user access token) Another is api (instance with app access token). Now let's go!","title":"Preparation"},{"location":"usage/streaming/","text":"Streaming endpoint delivers Tweet objects through a persistent HTTP GET connection. And now has two different api. For this library, provide StreamApi independent. Same as main Api , You need initial it first. You can see some Examples for it. from pytwitter import StreamApi stream_api = StreamApi ( bearer_token = \"bearer token\" ) # or use consumer key and secret # stream_api = StreamApi(consumer_key=\"consumer key\", consumer_secret=\"consumer secret\") Sampled stream The sampled stream endpoint delivers a roughly 1% random sample of publicly available Tweets in real-time. stream_api . sample_stream () Filtered stream If you want filter the stream tweets, You need add rules for api. np = { \"add\" : [ { \"value\" : \"cat has:media\" , \"tag\" : \"cats with media\" }, { \"value\" : \"cat has:media -grumpy\" , \"tag\" : \"happy cats with media\" } ] } stream_api . manage_rules ( rules = np , dry_run = True ) # Response(data=[StreamRule(id='1370406958721732610', value='cat has:media -grumpy'), StreamRule(id='1370406958721732609', value='cat has:media')]) Then use api stream_api . search_stream ()","title":"Steaming"},{"location":"usage/streaming/#sampled-stream","text":"The sampled stream endpoint delivers a roughly 1% random sample of publicly available Tweets in real-time. stream_api . sample_stream ()","title":"Sampled stream"},{"location":"usage/streaming/#filtered-stream","text":"If you want filter the stream tweets, You need add rules for api. np = { \"add\" : [ { \"value\" : \"cat has:media\" , \"tag\" : \"cats with media\" }, { \"value\" : \"cat has:media -grumpy\" , \"tag\" : \"happy cats with media\" } ] } stream_api . manage_rules ( rules = np , dry_run = True ) # Response(data=[StreamRule(id='1370406958721732610', value='cat has:media -grumpy'), StreamRule(id='1370406958721732609', value='cat has:media')]) Then use api stream_api . search_stream ()","title":"Filtered stream"},{"location":"usage/tweets/hide_reply/","text":"This endpoint gives you the ability to programmatically hide or unhide replies using criteria you define. hide reply my_api . hidden_reply ( tweet_id = \"tweet id\" ) # {\"data\":{\"hidden\":true}} un-hide reply my_api . hidden_reply ( tweet_id = \"tweet id\" , hidden = False ) # {\"data\":{\"hidden\":false}}","title":"Hide replies"},{"location":"usage/tweets/search_tweets/","text":"The recent and full-archive search REST endpoints are part of the Search Tweets group of endpoints, meaning they share a common design and features. Search by recent tweets api . search_tweets ( query = \"python\" ) # Response(data=[Tweet(id=1364512148865564675, text=RT @jesss_codes: Your resume: Git SSL Vue CSS...), Tweet(id=1364512106385702914, text=RT @theweeflea: Sturgeon goes on TV to declare...), Tweet(id=1364512102606467074, text=RT @tkEzaki:...), Tweet(id=1364512092343070721, text=RT @ore57436902: #Python #pyxel #\u30c9\u30eb\u30a2\u30fc\u30ac\u306e\u5854...), Tweet(id=1364512076601856007, text=RT @shosen_bt_pc:...), Tweet(id=1364512071866605568, text=RT @CatherineAdenle: 6 ways learning coding can...), Tweet(id=1364512071614889987, text=RT @giswqs: #geemap v0.8.11 has been released....), Tweet(id=1364512066770509824, text=RT @Akpanannang: Today when coming out from the...), Tweet(id=1364512053252284419, text=RT @HarbRimah: New Off-the-Shelf (OTS) Datasets...), Tweet(id=1364512030800171011, text=RT @gzadkowski: Day 5 - #100DaysOfCode...)]) Search by full-archive tweets, this api is Academic Research product track only . api . search_tweets ( query = \"python\" , query_type = \"all\" ) # Response(data=[Tweet(id=1364512148865564675, text=RT @jesss_codes: Your resume: Git SSL Vue CSS...), Tweet(id=1364512106385702914, text=RT @theweeflea: Sturgeon goes on TV to declare...), Tweet(id=1364512102606467074, text=RT @tkEzaki:...), Tweet(id=1364512092343070721, text=RT @ore57436902: #Python #pyxel #\u30c9\u30eb\u30a2\u30fc\u30ac\u306e\u5854...), Tweet(id=1364512076601856007, text=RT @shosen_bt_pc:...), Tweet(id=1364512071866605568, text=RT @CatherineAdenle: 6 ways learning coding can...), Tweet(id=1364512071614889987, text=RT @giswqs: #geemap v0.8.11 has been released....), Tweet(id=1364512066770509824, text=RT @Akpanannang: Today when coming out from the...), Tweet(id=1364512053252284419, text=RT @HarbRimah: New Off-the-Shelf (OTS) Datasets...), Tweet(id=1364512030800171011, text=RT @gzadkowski: Day 5 - #100DaysOfCode...)])","title":"Search Tweets"},{"location":"usage/tweets/timelines/","text":"The user Tweet timeline endpoints provides access to Tweets published by a specific Twitter account. Get user timelines api . get_timelines ( user_id = \"2244994945\" ) # Response(data=[Tweet(id=1364275610764201984, text=If you're newly approved for the Academic...), Tweet(id=1362876655061073928, text=From our living rooms to yours \ud83d\udc31\u200d\ud83d\udcbb\ud83d\udecb\ufe0fOur...), Tweet(id=1362439338978467841, text=\u201cTo quote my creator Jerome Gangneux, I always...), Tweet(id=1362439338169016324, text=\u201cIn the 20th century, managers managed humans,...), Tweet(id=1362439336910675970, text=Meet one of the useful Twitter bots out there:...), Tweet(id=1359912509940011010, text=Valentine\u2019s Day is approaching! \ud83d\udc99 Over the...), Tweet(id=1359554366051504129, text=Go ahead, follow another puppy account. We...), Tweet(id=1357371424487268354, text=Learn how academics can get historical Tweets...), Tweet(id=1356991771553583106, text=Who knew an API could be delicious?...), Tweet(id=1354215875998437376, text=RT @TwitterOSS: Today we\u2019re happy to share...)]) Get tweets which mention target user api . get_mentions ( user_id = \"2244994945\" ) # Response(data=[Tweet(id=1364407587207213056, text=@scottmathson @TwitterDev What would you want...), Tweet(id=1364398068313903104, text=@Twitter should consider supporting...), Tweet(id=1364377794327633925, text=@sugan2424 @TwitterDev @threadreaderapp You...), Tweet(id=1364377404156772352, text=@TwitterDev What kind of tweet / attachment is...), Tweet(id=1364373969852366849, text=\u2022 Thirdly, that @Twitter, @Twittersafety,...), Tweet(id=1364367885582352386, text=@Twitter @TwitterSafety @TwitterDev @jack...), Tweet(id=1364366114998870016, text=I have mixed feelings about @Twitter /...), Tweet(id=1364364744916951040, text=@Casanovacane @jack @TwitterDev can we get a...), Tweet(id=1364359199795240961, text=@TwitterDev @suhemparack A Blue app going to...), Tweet(id=1364338409494503425, text=@FairyMaitre @TwitterDev tkt)])","title":"Timelines"},{"location":"usage/tweets/tweet-lookup/","text":"Follow API could return information about a Tweet or group of Tweets, specified by a Tweet ID. Get single tweet api . get_tweet ( \"1354143047324299264\" , expansions = [ \"attachments.media_keys\" ], media_fields = [ \"type\" , \"duration_ms\" ]) # Response(data=Tweet(id=1354143047324299264, text=Academics are one of the biggest groups using...)) Get multi tweets by one request api . get_tweets ([ \"1261326399320715264\" , \"1278347468690915330\" ], expansions = \"author_id\" , tweet_fields = [ \"created_at\" ], user_fields = [ \"username\" , \"verified\" ]) # Response(data=[Tweet(id=1261326399320715264, text=Tune in to the @MongoDB @Twitch stream...), Tweet(id=1278347468690915330, text=Good news and bad news: 2020 is half over)])","title":"Tweet Lookup"},{"location":"usage/users/blocks/","text":"The manage blocks endpoints enable you to block or unblock a specified user on behalf of an authenticated user. For this endpoint group, there are two methods available POST and DELETE. The POST method allows you to block a user, and the DELETE method will enable you to unblock. You can get more information for this at docs Block user You can block a user my_api . block_user ( user_id = \"your id\" , target_user_id = \"target user id\" ) # {'data': {'blocking': True}} Unblock a user api . unblock_user ( user_id = \"your id\" , target_user_id = \"target user id\" ) # {'data': {'blocking': False}}","title":"Blocks"},{"location":"usage/users/blocks/#block-user","text":"You can block a user my_api . block_user ( user_id = \"your id\" , target_user_id = \"target user id\" ) # {'data': {'blocking': True}} Unblock a user api . unblock_user ( user_id = \"your id\" , target_user_id = \"target user id\" ) # {'data': {'blocking': False}}","title":"Block user"},{"location":"usage/users/follows/","text":"Following users is one of the most foundational actions on Twitter. Twitter offer two sets of endpoint groups to help you lookup, create, and delete follow relationships: follows lookup and manage follows. You can get more information for this at docs Follows lookup Get users are following by target user api . get_following ( user_id = \"2244994945\" , max_results = 5 ) # Response(data=[User(id='459860328', name='julie\u2728', username='JulieMendoza206'), User(id='273830767', name='\ud83c\udd3f\ud83c\udd44\ud83c\udd42\ud83c\udd37', username='rahul_pushkarna')...]) Get users are following the target user api . get_followers ( user_id = \"2244994945\" , max_results = 5 ) # Response(data=[User(id='715131097332518912', name='Daniel', username='RGIDaniel'), User(id='1176323137757048832', name='Joyce Wang', username='joycew67')...]) Manage Follows Those api need user access token. Follow a user my_api . follow_user ( user_id = \"123456\" , target_user_id = \"654321\" ) # {'data': {'following': True, 'pending_follow': False}} Unfollow a user my_api . unfollow_user ( user_id = \"123456\" , target_user_id = \"654321\" ) # {'data': {'following': False}}","title":"Follows"},{"location":"usage/users/follows/#follows-lookup","text":"Get users are following by target user api . get_following ( user_id = \"2244994945\" , max_results = 5 ) # Response(data=[User(id='459860328', name='julie\u2728', username='JulieMendoza206'), User(id='273830767', name='\ud83c\udd3f\ud83c\udd44\ud83c\udd42\ud83c\udd37', username='rahul_pushkarna')...]) Get users are following the target user api . get_followers ( user_id = \"2244994945\" , max_results = 5 ) # Response(data=[User(id='715131097332518912', name='Daniel', username='RGIDaniel'), User(id='1176323137757048832', name='Joyce Wang', username='joycew67')...])","title":"Follows lookup"},{"location":"usage/users/follows/#manage-follows","text":"Those api need user access token. Follow a user my_api . follow_user ( user_id = \"123456\" , target_user_id = \"654321\" ) # {'data': {'following': True, 'pending_follow': False}} Unfollow a user my_api . unfollow_user ( user_id = \"123456\" , target_user_id = \"654321\" ) # {'data': {'following': False}}","title":"Manage Follows"},{"location":"usage/users/user-lookup/","text":"Twitter allow app to lookup users. You can get more information at Lookup docs . If you have the username or ID for user(s) which you want to get data. You can use follows methods: Get multiple users by one requests # Get by ids api . get_users ( ids = [ \"783214\" , \"2244994945\" ]) # Response(data=[User(id='2244994945', name='Twitter Dev', username='TwitterDev'), User(id='783214', name='Twitter', username='Twitter')]) # Get by usernames api . get_users ( usernames = \"Twitter,TwitterDev\" ) # Response(data=[User(id='2244994945', name='Twitter Dev', username='TwitterDev'), User(id='783214', name='Twitter', username='Twitter')]) Get one user: # By id api . get_user ( user_id = \"783214\" ) # Response(data=User(id='783214', name='Twitter', username='Twitter')) # By username api . get_user ( username = \"Twitter\" ) # Response(data=User(id='783214', name='Twitter', username='Twitter'))","title":"Users Lookup"}]}